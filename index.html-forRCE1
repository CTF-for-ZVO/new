<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Ping Service - Real Fetch</title>
    <style>
        /* –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ (–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ) —à—Ä–∏—Ñ—Ç—É */
        body {
            font-family: 'Consolas', 'Courier New', monospace;
            margin: 0;
            padding: 0;
            background-color: #282c34; /* –¢–µ–º–Ω–∏–π —Ñ–æ–Ω (—è–∫ —É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ) */
            color: #abb2bf; /* –°–≤—ñ—Ç–ª–∏–π —Ç–µ–∫—Å—Ç */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .ping-container {
            width: 90%;
            max-width: 600px;
            padding: 30px;
            background-color: #3e4451; /* –¢—Ä–æ—Ö–∏ —Å–≤—ñ—Ç–ª—ñ—à–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
            text-align: center;
        }

        h1 {
            color: #61afef; /* –ë–ª–∞–∫–∏—Ç–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç */
            margin-bottom: 30px;
            font-size: 1.8em;
        }

        input[type="text"] {
            width: calc(100% - 22px);
            padding: 10px;
            margin-bottom: 20px;
            background-color: #282c34;
            border: 1px solid #5c6370;
            color: #e6c07b; /* –ñ–æ–≤—Ç—É–≤–∞—Ç–∏–π –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è */
            border-radius: 4px;
            font-family: inherit;
            font-size: 1em;
            box-sizing: border-box; /* –í–∞–∂–ª–∏–≤–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —à–∏—Ä–∏–Ω–∏ */
        }

        button {
            background-color: #98c379; /* –ó–µ–ª–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ */
            color: #282c34;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-family: inherit;
            font-size: 1em;
            transition: background-color 0.3s, opacity 0.3s;
        }

        button:hover:not(:disabled) {
            background-color: #b4e195;
        }

        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, —ñ–º—ñ—Ç–∞—Ü—ñ—è –≤–∏–≤–æ–¥—É —Ç–µ—Ä–º—ñ–Ω–∞–ª—É */
        #results {
            margin-top: 30px;
            text-align: left;
            padding: 15px;
            background-color: #282c34;
            border: 1px solid #5c6370;
            min-height: 150px;
            white-space: pre-wrap;
            overflow-y: auto;
            border-radius: 4px;
        }

        /* –°—Ç–∏–ª—ñ –¥–ª—è –≤–∏–≤–æ–¥—É */
        .ping-success { color: #98c379; } /* –ó–µ–ª–µ–Ω–∏–π */
        .ping-error { color: #e06c75; } /* –ß–µ—Ä–≤–æ–Ω–∏–π */
        .ping-info { color: #61afef; } /* –ë–ª–∞–∫–∏—Ç–Ω–∏–π */
        .ping-host { color: #e6c07b; } /* –ñ–æ–≤—Ç–∏–π */

        /* –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */
        .loader {
            display: inline-block;
            width: 1em;
            height: 1em;
            border: 2px solid #56b6c2;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>

    <div class="ping-container">
        <h1>üåê –í–µ–±-—Å–µ—Ä–≤—ñ—Å PING</h1>

        <input type="text" id="targetHost" placeholder="–í–≤–µ–¥—ñ—Ç—å IP-–∞–¥—Ä–µ—Å—É –∞–±–æ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, google.com)" value="google.com">

        <button onclick="startPingRequest()">–ü–Ü–ù–ì–£–í–ê–¢–ò</button>

        <div id="results">
            –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è...
        </div>
    </div>

    <script>
        const resultsDiv = document.getElementById('results');
        const targetHostInput = document.getElementById('targetHost');
        const pingButton = document.querySelector('button');
        const BACKEND_URL = '/ping.php'; // –®–ª—è—Ö –¥–æ –≤–∞—à–æ–≥–æ PHP-—Å–∫—Ä–∏–ø—Ç–∞

        /**
         * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –±–µ–∫–µ–Ω–¥ –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è
         */
        async function startPingRequest() {
            const host = targetHostInput.value.trim();
            if (!host) {
                resultsDiv.innerHTML = '<span class="ping-error">–ü–æ–º–∏–ª–∫–∞:</span> –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ö–æ—Å—Ç.';
                return;
            }

            // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            pingButton.disabled = true;
            pingButton.innerHTML = '–ó–ê–ü–ò–¢... <span class="loader"></span>';
            resultsDiv.innerHTML = `<span class="ping-info">Pinging <span class="ping-host">${host}</span> via server...</span><br>`;
            resultsDiv.innerHTML += '<span class="ping-info">Waiting for response...</span>';

            try {
                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –±–µ–∫–µ–Ω–¥: /ping.php?ip=google.com
                const response = await fetch(`${BACKEND_URL}?ip=${encodeURIComponent(host)}`);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                const data = await response.text();

                // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä—Ç–∞—î —á–∏—Å—Ç–∏–π —Ç–µ–∫—Å—Ç ping-–≤–∏–≤–æ–¥—É)
                resultsDiv.innerHTML = formatPingOutput(data);

            } catch (error) {
                resultsDiv.innerHTML = `<span class="ping-error">–ü–û–ú–ò–õ–ö–ê –ó'–Ñ–î–ù–ê–ù–ù–Ø!</span><br>`;
                resultsDiv.innerHTML += `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ${BACKEND_URL}. <br>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞—Ü—é—î –≤–∞—à –±–µ–∫–µ–Ω–¥.<br>`;
                resultsDiv.innerHTML += `<span class="ping-info">–î–µ—Ç–∞–ª—ñ: ${error.message}</span>`;
            } finally {
                // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
                pingButton.disabled = false;
                pingButton.textContent = '–ü–Ü–ù–ì–£–í–ê–¢–ò';
            }
        }

        /**
         * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É, –¥–æ–¥–∞—é—á–∏ –∫–æ–ª—å–æ—Ä–∏.
         * –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —î –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—é —ñ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ñ–æ—Ä–º–∞—Ç—É –≤–∏–≤–æ–¥—É –≤–∞—à–æ–≥–æ –±–µ–∫–µ–Ω–¥–∞.
         * –¢—É—Ç –º–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–º—ñ–Ω—é—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–∞ –∫–æ–ª—å–æ—Ä–æ–≤—ñ —Ç–µ–≥–∏.
         */
        function formatPingOutput(rawText) {
            let formattedText = rawText.replace(/\n/g, '<br>');

            // –ó–∞–º—ñ–Ω–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –Ω–∞ –∑–µ–ª–µ–Ω–∏–π (—É—Å–ø—ñ—Ö/—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
            formattedText = formattedText.replace(/Reply from/g, '<span class="ping-success">Reply from</span>');
            formattedText = formattedText.replace(/time=/g, '<span class="ping-success">time=</span>');
            formattedText = formattedText.replace(/Minimum|Maximum|Average/g, '<span class="ping-success">$&</span>');

            // –ó–∞–º—ñ–Ω–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –Ω–∞ —á–µ—Ä–≤–æ–Ω–∏–π (–ø–æ–º–∏–ª–∫–∞/–≤—Ç—Ä–∞—Ç–∞)
            formattedText = formattedText.replace(/Request timed out|Destination host unreachable/g, '<span class="ping-error">$&</span>');
            formattedText = formattedText.replace(/Lost = [1-9]\d*/g, '<span class="ping-error">$&</span>'); // –í–∏–¥—ñ–ª—è—î –≤—Ç—Ä–∞—á–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏

            // –ó–∞–º—ñ–Ω–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –Ω–∞ –±–ª–∞–∫–∏—Ç–Ω–∏–π (—ñ–Ω—Ñ–æ)
            formattedText = formattedText.replace(/Pinging|Ping statistics|Approximate round trip times/g, '<span class="ping-info">$&</span>');

            // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ø–æ–º–∏–ª–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 404), –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —ó—ó —á–µ—Ä–≤–æ–Ω–∏–º
            if (formattedText.startsWith('HTTP error') || formattedText.startsWith('Error')) {
                 return `<span class="ping-error">${formattedText}</span>`;
            }

            return formattedText;
        }

    </script>

</body>
</html>
